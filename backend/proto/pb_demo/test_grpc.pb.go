// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: demo/test.proto

package pb_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoServiceClient interface {
	ListDemos(ctx context.Context, in *ListDemosRequest, opts ...grpc.CallOption) (*ListDemosResponse, error)
	GetDemo(ctx context.Context, in *GetDemoRequest, opts ...grpc.CallOption) (*Demo, error)
	CreateDemo(ctx context.Context, in *CreateDemoRequest, opts ...grpc.CallOption) (*Demo, error)
	UpdateDemo(ctx context.Context, in *UpdateDemoRequest, opts ...grpc.CallOption) (*Demo, error)
	DeleteDemo(ctx context.Context, in *DeleteDemoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type demoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoServiceClient(cc grpc.ClientConnInterface) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) ListDemos(ctx context.Context, in *ListDemosRequest, opts ...grpc.CallOption) (*ListDemosResponse, error) {
	out := new(ListDemosResponse)
	err := c.cc.Invoke(ctx, "/demo.v1.DemoService/ListDemos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) GetDemo(ctx context.Context, in *GetDemoRequest, opts ...grpc.CallOption) (*Demo, error) {
	out := new(Demo)
	err := c.cc.Invoke(ctx, "/demo.v1.DemoService/GetDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) CreateDemo(ctx context.Context, in *CreateDemoRequest, opts ...grpc.CallOption) (*Demo, error) {
	out := new(Demo)
	err := c.cc.Invoke(ctx, "/demo.v1.DemoService/CreateDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) UpdateDemo(ctx context.Context, in *UpdateDemoRequest, opts ...grpc.CallOption) (*Demo, error) {
	out := new(Demo)
	err := c.cc.Invoke(ctx, "/demo.v1.DemoService/UpdateDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) DeleteDemo(ctx context.Context, in *DeleteDemoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/demo.v1.DemoService/DeleteDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServiceServer is the server API for DemoService service.
// All implementations must embed UnimplementedDemoServiceServer
// for forward compatibility
type DemoServiceServer interface {
	ListDemos(context.Context, *ListDemosRequest) (*ListDemosResponse, error)
	GetDemo(context.Context, *GetDemoRequest) (*Demo, error)
	CreateDemo(context.Context, *CreateDemoRequest) (*Demo, error)
	UpdateDemo(context.Context, *UpdateDemoRequest) (*Demo, error)
	DeleteDemo(context.Context, *DeleteDemoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDemoServiceServer()
}

// UnimplementedDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (UnimplementedDemoServiceServer) ListDemos(context.Context, *ListDemosRequest) (*ListDemosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDemos not implemented")
}
func (UnimplementedDemoServiceServer) GetDemo(context.Context, *GetDemoRequest) (*Demo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemo not implemented")
}
func (UnimplementedDemoServiceServer) CreateDemo(context.Context, *CreateDemoRequest) (*Demo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemo not implemented")
}
func (UnimplementedDemoServiceServer) UpdateDemo(context.Context, *UpdateDemoRequest) (*Demo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemo not implemented")
}
func (UnimplementedDemoServiceServer) DeleteDemo(context.Context, *DeleteDemoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDemo not implemented")
}
func (UnimplementedDemoServiceServer) mustEmbedUnimplementedDemoServiceServer() {}

// UnsafeDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServiceServer will
// result in compilation errors.
type UnsafeDemoServiceServer interface {
	mustEmbedUnimplementedDemoServiceServer()
}

func RegisterDemoServiceServer(s grpc.ServiceRegistrar, srv DemoServiceServer) {
	s.RegisterService(&DemoService_ServiceDesc, srv)
}

func _DemoService_ListDemos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDemosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).ListDemos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.DemoService/ListDemos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).ListDemos(ctx, req.(*ListDemosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_GetDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).GetDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.DemoService/GetDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).GetDemo(ctx, req.(*GetDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_CreateDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).CreateDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.DemoService/CreateDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).CreateDemo(ctx, req.(*CreateDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_UpdateDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).UpdateDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.DemoService/UpdateDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).UpdateDemo(ctx, req.(*UpdateDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_DeleteDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).DeleteDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.DemoService/DeleteDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).DeleteDemo(ctx, req.(*DeleteDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DemoService_ServiceDesc is the grpc.ServiceDesc for DemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v1.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDemos",
			Handler:    _DemoService_ListDemos_Handler,
		},
		{
			MethodName: "GetDemo",
			Handler:    _DemoService_GetDemo_Handler,
		},
		{
			MethodName: "CreateDemo",
			Handler:    _DemoService_CreateDemo_Handler,
		},
		{
			MethodName: "UpdateDemo",
			Handler:    _DemoService_UpdateDemo_Handler,
		},
		{
			MethodName: "DeleteDemo",
			Handler:    _DemoService_DeleteDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo/test.proto",
}
